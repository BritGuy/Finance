import pandas as pd
import numpy as np
import numba
import matplotlib.pyplot as plt
from ipywidgets import IntProgress
from IPython.display import display, clear_output
from numba import vectorize

ThirdFridayModFol = ['1990-01-19','1990-02-16','1990-03-16','1990-04-20',
'1990-05-18','1990-06-15','1990-07-20','1990-08-17','1990-09-21','1990-10-19','1990-11-16','1990-12-21',
'1991-01-18','1991-02-15','1991-03-15','1991-04-19','1991-05-17','1991-06-21','1991-07-19','1991-08-16',
'1991-09-20','1991-10-18','1991-11-15','1991-12-20','1992-01-17','1992-02-21','1992-03-20','1992-04-17',
'1992-05-15','1992-06-19','1992-07-17','1992-08-21','1992-09-18','1992-10-16','1992-11-20','1992-12-18',
'1993-01-15','1993-02-19','1993-03-19','1993-04-16','1993-05-21','1993-06-18','1993-07-16','1993-08-20',
'1993-09-17','1993-10-15','1993-11-19','1993-12-17','1994-01-21','1994-02-18','1994-03-18','1994-04-15',
'1994-05-20','1994-06-17','1994-07-15','1994-08-19','1994-09-16','1994-10-21','1994-11-18','1994-12-16',
'1995-01-20','1995-02-17','1995-03-17','1995-04-21','1995-05-19','1995-06-16','1995-07-21','1995-08-18',
'1995-09-15','1995-10-20','1995-11-17','1995-12-15','1996-01-19','1996-02-16','1996-03-15','1996-04-19',
'1996-05-17','1996-06-21','1996-07-19','1996-08-16','1996-09-20','1996-10-18','1996-11-15','1996-12-20',
'1997-01-17','1997-02-21','1997-03-21','1997-04-18','1997-05-16','1997-06-20','1997-07-18','1997-08-15',
'1997-09-19','1997-10-17','1997-11-21','1997-12-19','1998-01-16','1998-02-20','1998-03-20','1998-04-17',
'1998-05-15','1998-06-19','1998-07-17','1998-08-21','1998-09-18','1998-10-16','1998-11-20','1998-12-18',
'1999-01-15','1999-02-19','1999-03-19','1999-04-16','1999-05-21','1999-06-18','1999-07-16','1999-08-20',
'1999-09-17','1999-10-15','1999-11-19','1999-12-17','2000-01-21','2000-02-18','2000-03-17','2000-04-24',
'2000-05-19','2000-06-16','2000-07-21','2000-08-18','2000-09-15','2000-10-20','2000-11-17','2000-12-15',
'2001-01-19','2001-02-16','2001-03-16','2001-04-20','2001-05-18','2001-06-15','2001-07-20','2001-08-17',
'2001-09-21','2001-10-19','2001-11-16','2001-12-21','2002-01-18','2002-02-15','2002-03-15','2002-04-19',
'2002-05-17','2002-06-21','2002-07-19','2002-08-16','2002-09-20','2002-10-18','2002-11-15','2002-12-20',
'2003-01-17','2003-02-21','2003-03-21','2003-04-21','2003-05-16','2003-06-20','2003-07-18','2003-08-15',
'2003-09-19','2003-10-17','2003-11-21','2003-12-19','2004-01-16','2004-02-20','2004-03-19','2004-04-16',
'2004-05-21','2004-06-18','2004-07-16','2004-08-20','2004-09-17','2004-10-15','2004-11-19','2004-12-17',
'2005-01-21','2005-02-18','2005-03-18','2005-04-15','2005-05-20','2005-06-17','2005-07-15','2005-08-19',
'2005-09-16','2005-10-21','2005-11-18','2005-12-16','2006-01-20','2006-02-17','2006-03-17','2006-04-21',
'2006-05-19','2006-06-16','2006-07-21','2006-08-18','2006-09-15','2006-10-20','2006-11-17','2006-12-15',
'2007-01-19','2007-02-16','2007-03-16','2007-04-20','2007-05-18','2007-06-15','2007-07-20','2007-08-17',
'2007-09-21','2007-10-19','2007-11-16','2007-12-21','2008-01-18','2008-02-15','2008-03-24','2008-04-18',
'2008-05-16','2008-06-20','2008-07-18','2008-08-15','2008-09-19','2008-10-17','2008-11-21','2008-12-19',
'2009-01-16','2009-02-20','2009-03-20','2009-04-17','2009-05-15','2009-06-19','2009-07-17','2009-08-21',
'2009-09-18','2009-10-16','2009-11-20','2009-12-18','2010-01-15','2010-02-19','2010-03-19','2010-04-16',
'2010-05-21','2010-06-18','2010-07-16','2010-08-20','2010-09-17','2010-10-15','2010-11-19','2010-12-17',
'2011-01-21','2011-02-18','2011-03-18','2011-04-15','2011-05-20','2011-06-17','2011-07-15','2011-08-19',
'2011-09-16','2011-10-21','2011-11-18','2011-12-16','2012-01-20','2012-02-17','2012-03-16','2012-04-20',
'2012-05-18','2012-06-15','2012-07-20','2012-08-17','2012-09-21','2012-10-19','2012-11-16','2012-12-21',
'2013-01-18','2013-02-15','2013-03-15','2013-04-19','2013-05-17','2013-06-21','2013-07-19','2013-08-16',
'2013-09-20','2013-10-18','2013-11-15','2013-12-20','2014-01-17','2014-02-21','2014-03-21','2014-04-21',
'2014-05-16','2014-06-20','2014-07-18','2014-08-15','2014-09-19','2014-10-17','2014-11-21','2014-12-19',
'2015-01-16','2015-02-20','2015-03-20','2015-04-17','2015-05-15','2015-06-19','2015-07-17','2015-08-21',
'2015-09-18','2015-10-16','2015-11-20','2015-12-18','2016-01-15','2016-02-19','2016-03-18','2016-04-15',
'2016-05-20','2016-06-17','2016-07-15','2016-08-19','2016-09-16','2016-10-21','2016-11-18','2016-12-16',
'2017-01-20','2017-02-17','2017-03-17','2017-04-21','2017-05-19','2017-06-16','2017-07-21','2017-08-18',
'2017-09-15','2017-10-20','2017-11-17','2017-12-15','2018-01-19','2018-02-16','2018-03-16','2018-04-20',
'2018-05-18','2018-06-15','2018-07-20','2018-08-17','2018-09-21','2018-10-19','2018-11-16','2018-12-21',
'2019-01-18','2019-02-15','2019-03-15','2019-04-22','2019-05-17','2019-06-21','2019-07-19','2019-08-16',
'2019-09-20','2019-10-18','2019-11-15','2019-12-20','2020-01-17','2020-02-21','2020-03-20','2020-04-17',
'2020-05-15','2020-06-19','2020-07-17','2020-08-21','2020-09-18','2020-10-16','2020-11-20','2020-12-18',
]

def ReadCSV(filename):
    df = pd.read_csv(filename).drop(0)
    return df

def CSVReformat(DataFrame):
    df = DataFrame.set_index(pd.to_datetime(DataFrame['Date']))
    df = df.drop('Date',axis=1)
    df = df[df.index.dayofweek <5]
    df_columns = df.columns
    df = df[df_columns].astype('float64')
    return df

@numba.jit(parallel=True)
def BuildBaseIndex(Prices,Volumes,RebalanceDays):
    idx_RebalanceDays = pd.DatetimeIndex(RebalanceDays).tolist()
    columns_tickers = Prices.columns  
    df_Rebalances = pd.DataFrame(data=Prices,index=Prices.index[Prices.index.isin(idx_RebalanceDays)],columns=columns_tickers)
    df_Rebalances['Multiplier'] = np.exp(np.log(((df_Rebalances[columns_tickers]/df_Rebalances[columns_tickers].shift(1)).fillna(value=1)).sum(axis=1)/len(columns_tickers)).cumsum())
    df_Rebalances[columns_tickers]= 1/len(columns_tickers)/df_Rebalances[columns_tickers].values  
    df_EquityWeights = Prices.copy()
    df_EquityWeights[columns_tickers] = df_Rebalances[columns_tickers]
    df_EquityWeights[columns_tickers] = df_EquityWeights[columns_tickers].fillna(method='ffill')    
    df_BaseIndex = Prices.copy()
    df_BaseIndex['Rebalance Date'] = df_BaseIndex.index.isin(idx_RebalanceDays)
    df_BaseIndex[columns_tickers] = df_EquityWeights[columns_tickers] * df_BaseIndex[columns_tickers]
    df_BaseIndex['Mutliplier'] = df_Rebalances['Multiplier']
    df_BaseIndex['Mutliplier'] = df_BaseIndex['Mutliplier'].fillna(method='ffill').fillna(method='bfill')
    df_BaseIndex['Index'] = df_BaseIndex['Mutliplier']*df_BaseIndex[columns_tickers].sum(axis=1)
    for i,ticker in enumerate(columns_tickers):
        df_EquityWeights[ticker] =  ((df_EquityWeights[ticker]*df_BaseIndex['Mutliplier'])*Prices[ticker])/df_BaseIndex['Index']
    df_BaseIndex = pd.DataFrame(df_BaseIndex['Index'],df_BaseIndex.index,columns=['Index'])    
    return [df_BaseIndex,df_EquityWeights]

@numba.jit(parallel=True)
def BuildLeveragedETN(BaseIndex,LeverageFactor):
    df_LeveragedETN = pd.DataFrame(0,index=BaseIndex.index,columns=['LeveragedETN'])
    df_LeveragedETN['LeveragedETN'] = np.exp(np.log(((BaseIndex['Index']/BaseIndex['Index'].shift(1)-1)*LeverageFactor)+1).cumsum())
    df_LeveragedETN['LeveragedETN'].iloc[0] = 1
    return df_LeveragedETN

@numba.jit(parallel=True)
def BuildLeveragedPerformanceSimulations(BaseIndex,LeverageFactor):
    BaseSimulation = BuildLeveragedETN(BaseIndex,LeverageFactor)
    SimulationDates = BaseSimulation.index.strftime("%Y-%m-%d")
    Dates_Count = len(SimulationDates)
    ones = np.ones((Dates_Count,Dates_Count))
    mutipliers = (ones/BaseSimulation['LeveragedETN'].values)
    data = (BaseSimulation['LeveragedETN'].values*ones)    
    Simulations = pd.DataFrame(100*mutipliers*data.transpose(),index=BaseSimulation.index,columns=SimulationDates)
    df_mask = pd.DataFrame(round(Simulations[Simulations.columns],8) == 100,index=Simulations.index,columns=Simulations.columns)*1
    df_mask = df_mask.mask(df_mask==0,None).ffill()
    Simulations = Simulations[SimulationDates] * df_mask[SimulationDates]
    return Simulations

@numba.jit(parallel=True)
def ETN_LiquidityProfile(ETN_Exposure,Simulations,Prices,Volumes,Weights,Buckets):
    df_ETN_Weights = pd.DataFrame(index=Weights.index)
    df_ETN_Liquidity = pd.DataFrame(index=Weights.index)
    tickers = Prices.columns
    interval_index = pd.IntervalIndex.from_breaks(Buckets,closed='right').tolist()
    df_bucketedreturns = pd.DataFrame(0,interval_index,tickers)
    SimulationDates = Simulations.columns
    progress = IntProgress(min=0,max=len(SimulationDates))
    display(progress)
    
    for i,date in enumerate(SimulationDates):
        df_ETN_Weights['ETN Exposure'] = ((ETN_Exposure/100)*Simulations[date])
        for j,ticker in enumerate(tickers):
            df_ETN_Weights[ticker] = Weights[ticker] * df_ETN_Weights['ETN Exposure'].values
            df_ETN_Weights[ticker+'.DeltaShares'] = df_ETN_Weights[ticker].values/Prices[ticker].values
            df_ETN_Weights[ticker+'.DeltaChange'] = abs(df_ETN_Weights[ticker+'.DeltaShares']-df_ETN_Weights[ticker+'.DeltaShares'].shift(1))
            df_ETN_Liquidity[ticker] = df_ETN_Weights[ticker+'.DeltaChange'].values/Volumes[ticker].values
            bins = pd.cut(abs(df_ETN_Liquidity[ticker]),Buckets)
            bucketedreturns = df_ETN_Liquidity[ticker].groupby(bins).agg(['count'])
            df_bucketedreturns[ticker] += bucketedreturns['count'].values
        progress.value += 1
    return df_bucketedreturns
   
df_PX_LAST = CSVReformat(ReadCSV('PX_LAST.csv'))
df_PX_VOLUME = CSVReformat(ReadCSV('PX_VOLUME.csv'))
LiquidityProfileBuckets = [0,0.005,0.01,0.015,0.02,0.025,0.03,0.035,0.04,0.045,0.05,0.055,0.06,0.065,0.07,0.075,0.08,0.085,0.09,0.095,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,0.5,0.55,0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.95,1,2,3]

ETN_Leverage = 3
ETN_Notional = 100000000
ETN_Exposure = ETN_Notional*ETN_Leverage

ETN_LiquidityProfile(ETN_Exposure,ETN_Performances,df_PX_LAST,df_PX_VOLUME,Weights,LiquidityProfileBuckets)
